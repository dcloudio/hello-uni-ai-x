import { Renderer } from './Renderer';
import { TextRenderer } from './TextRenderer';
import { _defaults } from './defaults';
import { MarkedToken, Token, MarkedOptions, I_Parser, I_Renderer, I_TextRenderer, RendererExtensionFunction, RendererThis, Generic, Text, Paragraph, Space, Hr, Code, Table, Blockquote, List, HTML, Tag, Escape, Link, Image, Strong, Em, Codespan, Br, Del, TableCell, ListItem, Heading, NodesToken } from '../utssdk/interface';

/**
 * Parsing & Compiling
 */
export class Parser implements I_Parser {
	options: MarkedOptions;
	renderer: I_Renderer;
	textRenderer: I_TextRenderer;
	
	constructor(options?: MarkedOptions) {
	    this.options = options ?? _defaults;
		this.options.renderer = this.options.renderer ?? new Renderer(null);
		this.renderer = this.options.renderer!;
		this.renderer.options = this.options;
		this.renderer.parser = this;
		this.textRenderer = new TextRenderer();
	}
	
	/**
	   * Static Parse Method
	   */
	static parse(tokens: NodesToken[], options: MarkedOptions | null = null): string {
		const parser = new Parser(options);
		return parser.parse(tokens, null);
	}
	
	/**
	   * Static Parse Inline Method
	   */
	static parseInline(tokens: NodesToken[], options: MarkedOptions | null = null): string {
		const parser = new Parser(options);
		return parser.parseInline(tokens, null);
	}
	
	/**
	   * Parse Loop
	   */
	parse(tokens: NodesToken[], top?: boolean): string {
		let out = '';
		for (let i = 0; i < tokens.length; i++) {
			const anyToken = tokens[i];
			
			// Run any renderer extensions
			if (this.options.extensions != null && this.options.extensions!.renderers[anyToken.type!] != null) {
				const genericToken = anyToken;
				const ret = (this.options.extensions!.renderers[anyToken.type!] as RendererExtensionFunction)({ parser: this } as RendererThis, genericToken);
				if (ret != false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type as string)) {
					out += ret ?? '';
					continue;
				}
			}
			
			const token = anyToken;
			
			switch (token.type!) {
				case 'space':
					out = out + this.renderer.space({
						type:'space',
						raw: token.raw as string,
						tokens: [] as NodesToken[]
					} as NodesToken);
					break;
				case 'hr':
					out += this.renderer.hr({
						type: 'hr',
						raw: token.raw as string,
						tokens: [] as NodesToken[]
					} as NodesToken);
					break;
				case 'heading':
					out += this.renderer.heading({
						type: 'heading',
						raw: token.raw as string,
						text: token.text as string,
						depth: token.depth as number,
						tokens: token.tokens as NodesToken[]
					} as NodesToken);
					break;
				case 'code':
					out += this.renderer.code({
						type: 'code',
						raw: token.raw as string,
						codeBlockStyle: token.codeBlockStyle != null ? (token.codeBlockStyle as 'indented' | null) : null,
						lang: token.lang != null ? (token.lang as string) : null,
						text: token.text as string,
						escaped: token.escaped != null ? (token.escaped as boolean) : null,
						tokens: [] as NodesToken[]
					} as NodesToken);
					break;
				case 'table':
					out += this.renderer.table({
						type: 'table',
						raw: token.raw as string,
						align: token.align as Array<'center' | 'left' | 'right' | null>,
						header: token.header as TableCell[],
						rows: token.rows as TableCell[][],
						tokens: [] as NodesToken[]
					} as NodesToken);
					break;
				case 'blockquote':
					out += this.renderer.blockquote({
						type: 'blockquote',
						raw: token.raw as string,
						text: token.text as string,
						tokens: token.tokens as NodesToken[]
					} as NodesToken);
					break;
				case 'list':
					out += this.renderer.list({
						type: 'list',
						raw: token.raw as string,
						ordered: token.ordered as boolean,
						start: token.start as number | string,
						loose: token.loose as boolean,
						items: token.items as NodesToken[],
						tokens: [] as NodesToken[]
					} as NodesToken);
					break;
				case 'html':
					out += this.renderer.html({
						type: 'html',
						raw: token.raw as string,
						text: token.text as string,
						block: token.block as boolean,
						pre: token.pre as boolean,
						tokens: [] as NodesToken[]
					} as NodesToken);
					break;
				case 'paragraph':
					out += this.renderer.paragraph({
						type: 'paragraph',
						raw: token.raw as string,
						text: token.text as string,
						pre: token.pre == null ? null : (token.pre as boolean),
						tokens: token.tokens as NodesToken[]
					} as NodesToken);
					break;
				case 'text':
					let textToken = token;
					let body = this.renderer.text({
						type: 'text',
						raw: textToken.raw as string,
						text: textToken.text as string,
						tokens: textToken.tokens != null ? (textToken.tokens as NodesToken[]) : null,
						escaped: textToken.escaped != null ? (textToken.escaped as boolean) : null
					} as NodesToken);
					if (tokens[i + 1] != null) {
						// const nextToken = JSON.parseObject(JSON.stringify(tokens[i + 1])!)!;
						const nextToken = tokens[i + 1];
						while (i + 1 < tokens.length && nextToken.type == 'text') {
							textToken = tokens[++i];
							body += '\n' + this.renderer.text({
								type: 'text',
								raw: textToken.raw as string,
								text: textToken.text as string,
								tokens: textToken.tokens != null ? (textToken.tokens as NodesToken[]) : null,
								escaped: textToken.escaped != null ? (textToken.escaped as boolean) : null
							} as NodesToken);
						}
					}
					if (top == true) {
						out += this.renderer.paragraph({
							type: 'paragraph',
							raw: body,
							text: body,
							tokens: [
								{
									type: 'text',
									raw: body,
									text: body,
									escaped: true,
									tokens: [] as NodesToken[]
								}
							] as NodesToken[]
						} as NodesToken);
					} else {
						out += body;
					}
					break;
				
				default:
					const errMsg = 'Token with "' + token.type + '" type was not found.';
					if (this.options['slient'] != null) {
						console.error(errMsg);
						return '';
					} else {
						throw new Error(errMsg);
					}
			}
		}
		
		return out;
	}
	
	/**
	   * Parse Inline Tokens
	   */
	parseInline(tokens: NodesToken[], renderer?: I_Renderer | I_TextRenderer): string {
		let out = '';
		renderer = renderer ?? this.renderer;
		
		for (let i = 0; i < tokens.length; i++) {
			const anyToken = tokens[i];
			
			// Run any renderer extensions
			if (this.options.extensions != null && this.options.extensions!.renderers[anyToken.type!] != null) {
				const ret = (this.options.extensions!.renderers[anyToken.type!] as RendererExtensionFunction)({ parser: this } as RendererThis, anyToken!);
				if (ret != false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(`${anyToken.type}`)) {
					out += ret ?? '';
					continue;
				}
			}
			
			const token = anyToken;
			
			switch (token.type) {
				case 'escape':
					const escapeTokenData = {
						type: 'escape',
						raw: token.raw as string,
						text: token.text as string,
						tokens: [] as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).text(escapeTokenData);
					} else {
						out += (renderer as I_TextRenderer).text(escapeTokenData);
					}
					break;
				case 'html':
					const htmlTokenData = {
						type: 'html',
						raw: token.raw as string,
						pre: token.pre as boolean,
						text: token.text as string,
						block: token.block as boolean,
						tokens: [] as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).html(htmlTokenData);
					} else {
						out += (renderer as I_TextRenderer).html(htmlTokenData); 
					}
					break;
				case 'link':
					const linkTokenData = {
						type: 'link',
						raw: token.raw as string,
						href: token.href as string,
						title:token.title == null ? null : token.title as string,
						text: token.text as string,
						tokens: token.tokens as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).link(linkTokenData);
					} else {
						out += (renderer as I_TextRenderer).link(linkTokenData);
					}
					break;
				case 'image':
					const imageTokenData = {
						type: 'image',
						raw: token.raw as string,
						href: token.href as string,
						title: token.title == null ? null : token.title as string,
						text: token.text as string,
						tokens: token.tokens as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).image(imageTokenData);
					} else {
						out += (renderer as I_TextRenderer).image(imageTokenData);
					}
					break;
				case'strong':
					const strongTokenData = {
						type:'strong',
						raw: token.raw as string,
						text: token.text as string,
						tokens: token.tokens as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).strong(strongTokenData);
					} else {
						out += (renderer as I_TextRenderer).strong(strongTokenData);
					}
					break;
				case 'em':
					const emTokenData = {
						type: 'em',
						raw: token.raw as string,
						text: token.text as string,
						tokens: token.tokens as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).em(emTokenData);
					} else {
						out += (renderer as I_TextRenderer).em(emTokenData);
					}
					break;
				case 'codespan':
					const codespanTokenData = {
						type: 'codespan',
						raw: token.raw as string,
						text: token.text as string,
						tokens: [] as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).codespan(codespanTokenData);
					} else {
						out += (renderer as I_TextRenderer).codespan(codespanTokenData);
					}
					break;
				case 'br':
					const brTokenData = {
						type: 'br',
						raw: token.raw as string,
						tokens: [] as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).br(brTokenData);
					} else {
						out += (renderer as I_TextRenderer).br();
					}
					break;
				case 'del':
					const delTokenData = {
						type: 'del',
						raw: token.raw as string,
						text: token.text as string,
						tokens: token.tokens as NodesToken[]
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).del(delTokenData);
					} else {
						out += (renderer as I_TextRenderer).del(delTokenData);
					}
					break;
				case 'text':
					const textTokenData = {
						type: 'text',
						raw: token.raw as string,
						text: token.text as string,
						tokens: token.tokens == null ? null : token.tokens as NodesToken[],
						escaped: token.escaped == null ? null : token.escaped as boolean
					} as NodesToken;
					if (renderer instanceof Renderer) {
						out += (renderer as I_Renderer).text(textTokenData);
					} else {
						out += (renderer as I_TextRenderer).text(textTokenData);
					}
					break;
				default:
					const errMsg = 'Token with "' + token.type + '" type was not found.';
					if (this.options.silent == true) {
						console.error(errMsg);
						return '';
					} else {
						throw new Error(errMsg);
					}
			}
		}
		
		return out;
	}
}