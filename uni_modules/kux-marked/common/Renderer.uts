import { _defaults } from './defaults';
import {
	cleanUrl,
	escape
} from './helpers';
import { other } from './rules';
import { MarkedOptions, Tokens, I_Parser, I_Renderer, Token, Space, Code, Blockquote, HTML, Tag, Hr, List, ListItem, Checkbox, Paragraph, Table, TableRow, TableCell, Strong, Em, Codespan, Br, Del, Link, Image, Text, Escape, MarkedToken, Heading, NodesToken } from '../utssdk/interface';

/**
 * Renderer
 */
export class Renderer implements I_Renderer {
	options: MarkedOptions;
	parser: I_Parser | null = null;
	
	constructor(options?: MarkedOptions) {
	    this.options = options ?? _defaults;
	}
	
	space(token: NodesToken): string {
		return '';
	}
	
	code(option: NodesToken): string {
		const { text, lang, escaped } = option;
		const langString = (lang ?? '').match(other.notSpaceStart)?.[0];
		
		const code = text!.replace(other.endingNewline, '') + '\n';
		
		if (langString == null) {
			return '<pre><code>' + (escaped == true ? code : escape(code, true)) + '</code></pre>\n';
		}
		
		return '<pre><code class="language-'
			+ escape(langString, null)
			+ '">'
			+ (escaped == true? code : escape(code, true))
			+ '</code></pre>\n';
	}
	
	blockquote(option: NodesToken): string {
		const { tokens } = option;
		const body = this.parser!.parse(tokens!, null);
		return `<blockquote>\n${body}</blockquote>\n`;
	}
	
	html(option: NodesToken): string {
		let text = '';
		option = option as NodesToken;
		if (option.type == 'html') {
			option = option;
			text = option.text!;
		} else {
			option = option;
			text = option.text!;
		}
		return '';
	}
	
	heading(option: NodesToken): string {
		const { depth, tokens } = option;
		return `<h${depth}>${this.parser!.parseInline(tokens!, null)}</h${depth}>\n`;
	}
	
	hr(token: NodesToken): string {
		return '<hr />\n';
	}
	
	list(token: NodesToken): string {
		const ordered = token.ordered;
		const start = token.start;
		
		let body = '';
		for (let j = 0; j < token!.items!.length; j++) {
			const item = token!.items![j];
			body += this.listitem(item!);
		}
		
		const type = ordered == true ? 'ol' : 'ul';
		const startAttr = (ordered == true && start != 1) ? (' start="' + start + '"') : '';
		return '<' + type + startAttr + '>\n' + body + '</' + type + '>\n';
	}
	
	listitem(item: NodesToken): string {
		let itemBody = '';
		if (item.task == true) {
			const checkbox = this.checkbox({ checked: item.checked == null ? false : item.checked! } as NodesToken);
			if (item.loose == true) {
				item.tokens![0] = item.tokens![0];
				if (item.tokens![0].type == 'paragraph') {
					item.tokens![0] = item.tokens![0];
					item.tokens![0].text = checkbox + ' ' + item.tokens![0].text;
					if (item.tokens![0].tokens != null && item.tokens![0].tokens!.length > 0 && item!.tokens![0]!.tokens![0].type == 'text') {
						item.tokens![0].tokens![0].text = checkbox + ' ' + escape(item.tokens![0].tokens![0].text!, null);
						item.tokens![0].tokens![0].escaped = true;
					}
				} else {
					item.tokens!.unshift({
						type: 'text',
						raw: checkbox + ' ',
						text: checkbox + ' ',
						escaped: true
					} as NodesToken);
				}
			} else {
				itemBody += checkbox + ' ';
			}
		}
		
		itemBody += this.parser!.parse(item.tokens!, item.loose == null ? false : item.loose!);
		
		return `<li>${itemBody}</li>\n`;
	}
	
	checkbox(option: NodesToken): string {
		const { checked } = option;
		return '<input '
		    + (checked == true ? 'checked="" ' : '')
		    + 'disabled="" type="checkbox">';
	}
	
	paragraph(option: NodesToken): string {
		const { tokens } = option;
		return `<p>${this.parser!.parseInline(tokens!, null)}</p>\n`;
	}
	
	table(token: NodesToken): string {
		let header = '';
		
		// header
		let cell = '';
		for (let j = 0; j < token.header!.length; j++) {
		  cell += this.tablecell(token.header![j]);
		}
		header += this.tablerow({ text: cell } as NodesToken);
		
		let body = '';
		for (let j = 0; j < token.rows!.length; j++) {
		  const row = token.rows![j];
	
		  cell = '';
		  for (let k = 0; k < row.length; k++) {
			cell += this.tablecell(row[k]);
		  }
	
		  body += this.tablerow({ text: cell } as NodesToken);
		}
		if (body.length > 0) body = `<tbody>${body}</tbody>`;
		
		return '<table>\n'
		  + '<thead>\n'
		  + header
		  + '</thead>\n'
		  + body
		  + '</table>\n';
	}
	
	tablerow(option: NodesToken): string {
		const { text } = option;
		return `<tr>${text}</tr>\n`;
	}
	
	tablecell(token: TableCell): string {
		const content = this.parser!.parseInline(token.tokens, null);
		const type = token.header ? 'th' : 'td';
		const tag = token.align != null
		  ? `<${type} align="${token.align}">`
		  : `<${type}>`;
		  
		return tag + content + `</${type}>\n`;
	}
	
	 /**
	   * span level renderer
	   */
	strong(option: NodesToken): string {
		const { tokens } = option;
		return `<strong>${this.parser!.parseInline(tokens!, null)}</strong>`;
	}
	
	em(option: NodesToken): string {
		const { tokens } = option;
		return `<em>${this.parser!.parseInline(tokens!, null)}</em>`;
	}
	
	codespan(option: NodesToken): string {
		const { text } = option;
		return `<code>${escape(text!, true)}</code>`;
	}
	
	br(token: NodesToken): string {
		return '<br>';
	}
	
	del(option: NodesToken): string {
		const { tokens } = option;
		return `<del>${this.parser!.parseInline(tokens!, null)}</del>`;
	}
	
	link(option: NodesToken): string {
		let { href, title, tokens } = option;
		const text = this.parser!.parseInline(tokens!, null);
		const cleanHref = cleanUrl(href!);
		
		if (cleanHref == null) {
			return text;
		}
		href = cleanHref;
		let out = '<a href="' + href + '"';
		if (title != null) {
			out += ' title="' + (escape(title, null)) + '"';
		}
		out += '>' + text + '</a>';
		return out;
	}
	
	image(option: NodesToken): string {
		let { href, title, text } = option;
		const cleanHref = cleanUrl(href!);
		if (cleanHref == null) {
			return escape(text!, null);
		}
		href = cleanHref;
		
		let out = `<img src="${href}" alt="${text}"`;
		if (title != null) {
			out += ` title="${escape(title, null)}"`;
		}
		out += '>';
		return out;
	}
	
	text(token: NodesToken): string {
		const obj = token as NodesToken;
		if (obj.tokens != null && obj.tokens!.length > 0) {
			return this.parser!.parseInline(obj.tokens as NodesToken[], null);
		} else {
			return (obj.escaped != null ? `${token.text}` : escape(`${token.text}`, null));
		}
	}
}