import { _getDefaults } from './defaults';
import { Lexer } from './Lexer';
import { Parser } from './Parser';
import { _Hooks } from './Hooks';
import { Renderer } from './Renderer';
import { Tokenizer } from './Tokenizer';
import { TextRenderer } from './TextRenderer';
import { escape } from './helpers';
import { MarkedExtension, MarkedOptions, Token, Tokens, TokensList, MaybePromise, UnknownFunction, GenericRendererFunction, I_Marked, OverloadedParse, I_Lexer, NodesToken } from '../utssdk/interface';

export class Marked implements I_Marked {
	defaults: MarkedOptions = _getDefaults();
	parse = this.parseMarkdown(true);
	parseInline = this.parseMarkdown(false);
	
	constructor(...args: MarkedExtension[]) {
	    
	}
	
	/**
	   * Run callback for every token
	   */
	// walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {
	// 	let values: MaybePromise[] = [] as MaybePromise[];
	// 	for (const token of tokens) {
	// 		values = values.concat(callback(token));
	// 		switch (token.type) {
	// 			case 'table': {
	// 				const tableToken = token as Tokens['Table'];
	// 				for (const cell of tableToken.header) {
	// 					values = values.concat(this.walkTokens(cell.tokens, callback));
	// 				}
	// 				for (const row of tableToken.rows) {
	// 					for (const cell of row) {
	// 						values = values.concat(this.walkTokens(cell.tokens, callback));
	// 					}
	// 				}
	// 				break;
	// 			}
	// 			case 'list': {
	// 				const listToken = token as Tokens['List'];
	// 				values = values.concat(this.walkTokens(listToken.items, callback));
	// 				break;
	// 			}
	// 			default: {
	// 				const genericToken = token as Tokens['Generic'];
	// 				if (this.defaults.extensions?.childTokens[genericToken['type']] != null) {
	// 					this.defaults.extensions.childTokens[genericToken['type']].forEach((childTokens) => {
	// 						const tokens = genericToken[childTokens]
	// 					})
	// 				}
	// 			}
	// 		}
	// 	}
	// }
	
	setOptions(opt: MarkedOptions): I_Marked {
		if (opt.async != null) {
			this.defaults.async = opt.async;
		}
		if (opt.breaks != null) {
			this.defaults.breaks = opt.breaks;
		}
		if (opt.extensions != null) {
			this.defaults.extensions = opt.extensions;
		}
		if (opt.gfm != null) {
			this.defaults.gfm = opt.gfm;
		}
		if (opt.hooks != null) {
			this.defaults.hooks = opt.hooks;
		}
		if (opt.pedantic != null) {
			this.defaults.pedantic = opt.pedantic;
		}
		if (opt.renderer != null) {
			this.defaults.renderer = opt.renderer;
		}
		if (opt.silent != null) {
			this.defaults.silent = opt.silent;
		}
		if (opt.tokenizer != null) {
			this.defaults.tokenizer = opt.tokenizer;
		}
		if (opt.walkTokens != null) {
			this.defaults.walkTokens = opt.walkTokens;
		}
		return this;
	}
	
	private combineOptions(options: MarkedOptions | null = null): MarkedOptions {
		if (options == null) {
			return {} as MarkedOptions;
		}
		return {
			async: options.async,
			breaks: options.breaks,
			extensions: options.extensions,
			gfm: options.gfm,
			hooks: options.hooks,
			pedantic: options.pedantic,
			renderer: options.renderer,
			silent: options.silent,
			tokenizer: options.tokenizer,
			walkTokens: options.walkTokens,
		} as MarkedOptions;
	}
	
	lexer(src: string, options?: MarkedOptions): TokensList {
		return Lexer.lex(src, options ?? this.defaults);
	}
	
	parser(tokens: NodesToken[], options?: MarkedOptions): string {
		return Parser.parse(tokens, options ?? this.defaults);
	}
	
	private parseMarkdown(blockType: boolean): (src: string, options?: MarkedOptions | null) => string | Promise<string | Promise<string>> {
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		const parse = async (src: string, options?: MarkedOptions | null): Promise<string | Promise<string>> => {
			const origOpt = this.combineOptions(options);
			this.setOptions(options ?? {} as MarkedOptions);
			const opt = this.defaults;
			
			const throwError = this.onError(opt.silent == null ? false : opt.silent!, opt.async == null ? false : opt.silent!);
			
			// throw error if an extension set async to true but parse was called with async: false
			if (this.defaults.async == true && origOpt.async == false) {
				return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));
			}
			
			// throw error in case of non string input
			if (opt.hooks != null) {
				opt.hooks!.options = opt;
				opt.hooks!.block = blockType;
			}
			
			// const lexer = opt.hooks != null ? opt.hooks!.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);
			let lexer: any | null = null;
			if (opt.hooks != null) {
				lexer = opt.hooks!.provideLexer();
			} else {
				if (blockType) {
					lexer = (src: string, options?: MarkedOptions): TokensList => {
						return Lexer.lex(src, options);
					}
				} else {
					lexer = (src: string, options?: MarkedOptions): NodesToken[] => {
						return Lexer.lexInline(src, options);
					}
				}
			}
			// const parser = opt.hooks != null ? opt.hooks!.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);
			let parser: any | null = null;
			if (opt.hooks!= null) {
				parser = opt.hooks!.provideParser();
			} else {
				parser = (tokens: NodesToken[], options?: MarkedOptions): string => {
					if (blockType) {
						return Parser.parse(tokens, options);
					}
					return Parser.parseInline(tokens, options);
				}
			}
			
			if (opt.async == true) {
				return Promise.resolve(opt.hooks != null ? opt.hooks!.preprocess(src) : src)
					// #ifndef APP-HARMONY
					.then((src): TokensList => lexer(src, opt))
					// #endif
					// #ifdef APP-HARMONY
					.then((src): TokensList => (lexer as Function)(src, opt))
					// #endif
					.then((tokens): any => opt.hooks != null ? opt.hooks!.processAllTokens(tokens) : tokens)
					// .then((tokens) => opt.walkTokens != null ? Promise.all())
					.then((tokens): string => (parser as (tokens: NodesToken[], options: MarkedOptions | null) => string)(tokens as NodesToken[], opt))
					.then((html): string => opt.hooks != null ? opt.hooks!.postprocess(html) : html)
					.catch((e): string | Promise<string> => {
						if (e instanceof Error) {
							return throwError(e as Error);
						}
						return throwError(new Error('Please report this to https://gitcode.com/uvuejs/kux-marked.'))
					});
			}
			
			try {
				if (opt.hooks != null) {
					src = opt.hooks!.preprocess(src);
				}
				let tokens: any | null = null;
				let html = '';
				await new Promise<any>((resolve, reject) => {
					// #ifdef APP-ANDROID
					UTSAndroid.getDispatcher('io').async((_) => {
					// #endif
						try {
							// #ifndef APP-HARMONY
							tokens = lexer(src, opt);
							// #endif
							// #ifdef APP-HARMONY
							tokens = (lexer as Function)(src, opt);
							// #endif
							if (opt.hooks != null) {
								tokens = opt.hooks!.processAllTokens(tokens as TokensList) as TokensList;
							}
							html = (parser as (tokens: NodesToken[], options: MarkedOptions | null) => string)(Array.isArray(tokens) ? (tokens as NodesToken[]) : (tokens as TokensList).tokens, opt);
							// #ifndef APP-HARMONY
							resolve(tokens!);
							// #endif
							// #ifdef APP-HARMONY
							resolve(tokens!);
							// #endif
						} catch (e) {
							reject(e);
						}
					// #ifdef APP-ANDROID
					}, null);
					// #endif
				});
				if (opt.hooks!= null) {
					html = opt.hooks!.postprocess(html);
				}
				return html;
			} catch (e) {
				if (e instanceof Error) {
					return throwError(e);
				}
				return throwError(new Error('Please report this to https://gitcode.com/uvuejs/kux-marked.'))
			}
		};
		
		return parse;
	}
	
	private onError(silent: boolean, async: boolean) {
		return (e: Error): string | Promise<string> => {
			e.message += '\nPlease report this to https://gitcode.com/uvuejs/kux-marked.';
			if (silent) {
				const msg = '<p>An error occurred:</p><pre>'
				  + escape(e.message + '', true)
				  + '</pre>';
				if (async) {
					return Promise.resolve(msg);
				}
				return msg;
			}
			if (async) {
				return Promise.reject(e);
			}
			throw e;
		};
	}
}

export { Renderer } from './Renderer';
export { TextRenderer } from './TextRenderer';

// export { _TextRenderer as TextRenderer } from './TextRenderer';
// export { _Tokenizer as Tokenizer } from './Tokenizer';

// export const Renderer = _Renderer;
// export const TextRenderer = _TextRenderer;
// export const Tokenizer = _Tokenizer;
// export const Lexer = _Lexer;