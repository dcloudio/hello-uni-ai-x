import { Generic, Token, Tokens, TokensList, NodesToken } from './Tokens.interface';
import { I_Parser } from './Parser.interface';
import { I_Lexer } from './Lexer.interface';
import { I_Renderer } from './Renderer.interface';
import { I_Tokenizer } from './Tokenizer.interface';
import { I_Hooks } from './Hooks.interface';

export type TokenizerThis = {
	lexer: I_Lexer;
}

export type TokenizerExtensionFunction = (instance: TokenizerThis, src: string, tokens: NodesToken[] | TokensList) => NodesToken | null;

export type TokenizerStartFunction = (instance: TokenizerThis, src: string) => number | null;

export type TokenizerExtension = {
	name: string;
	level: 'block' | 'inline';
	start?: TokenizerStartFunction | null;
	tokenizer: TokenizerExtensionFunction;
	childTokens?: string[] | null;
}

export type RendererThis = {
	parser: I_Parser;
}

export type RendererExtensionFunction = (instance: RendererThis, token: NodesToken) => string | false | null;

export type RendererExtension = {
	name: string;
	renderer: RendererExtensionFunction;
}

export type CombinedTokenizerAndRendererExtension = {
	name: string;
	level: 'block' | 'inline';
	start?: TokenizerStartFunction | null;
	tokenizer: TokenizerExtensionFunction;
	childTokens?: string[] | null;
	renderer: RendererExtensionFunction;
}

export type TokenizerAndRendererExtension = TokenizerExtension | RendererExtension | CombinedTokenizerAndRendererExtension;

type HooksObject = UTSJSONObject;
type RendererObject = UTSJSONObject;
type TokenizerObject = UTSJSONObject;

export type MarkedExtension = {
	/**
	   * True will tell marked to await any walkTokens functions before parsing the tokens and returning an HTML string.
	   */
	async?: boolean | null;
	/**
	   * Enable GFM line breaks. This option requires the gfm option to be true.
	   */
	breaks?: boolean | null;
	/**
	   * Add tokenizers and renderers to marked
	   */
	extensions?: TokenizerAndRendererExtension[] | null;
	/**
	   * Enable GitHub flavored markdown.
	   */
	gfm?: boolean | null;
	/**
	   * Hooks are methods that hook into some part of marked.
	   * preprocess is called to process markdown before sending it to marked.
	   * processAllTokens is called with the TokensList before walkTokens.
	   * postprocess is called to process html after marked has finished parsing.
	   * provideLexer is called to provide a function to tokenize markdown.
	   * provideParser is called to provide a function to parse tokens.
	   */
	hooks?: HooksObject | null;
	/**
	   * Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.
	   */
	pedantic?: boolean | null;
	/**
	   * Type: object Default: new Renderer()
	   *
	   * An object containing functions to render tokens to HTML.
	   */
	renderer?: RendererObject | null;
	/**
	   * Shows an HTML error message when rendering fails.
	   */
	silent?: boolean | null;
	/**
	   * The tokenizer defines how to turn markdown text into tokens.
	   */
	tokenizer?: TokenizerObject | null;
	/**
	   * The walkTokens function gets called with every token.
	   * Child tokens are called before moving on to sibling tokens.
	   * Each token is passed by reference so updates are persisted when passed to the parser.
	   * The return value of the function is ignored.
	   */
	walkTokens?: ((token: NodesToken) => null | Promise<void>) | null;
}

export type CustomExtension = {
	renderers: UTSJSONObject;
	childTokens: UTSJSONObject;
	inline?: TokenizerExtensionFunction[] | null;
	block?: TokenizerExtensionFunction[] | null;
	startInline?: TokenizerExtensionFunction[] | null;
	startBlock?: TokenizerExtensionFunction[] | null;
}

export type MarkedOptions = {
	/**
	   * True will tell marked to await any walkTokens functions before parsing the tokens and returning an HTML string.
	   */
	async?: boolean | null;
	/**
	   * Enable GFM line breaks. This option requires the gfm option to be true.
	   */
	breaks?: boolean | null;
	/**
	   * Enable GitHub flavored markdown.
	   */
	gfm?: boolean | null;
	/**
	   * Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.
	   */
	pedantic?: boolean | null;
	/**
	   * Shows an HTML error message when rendering fails.
	   */
	silent?: boolean | null;
	/**
	   * Hooks are methods that hook into some part of marked.
	   */
	hooks?: I_Hooks | null;
	/**
	   * Type: object Default: new Renderer()
	   *
	   * An object containing functions to render tokens to HTML.
	   */
	renderer?: I_Renderer | null;
	/**
	   * The tokenizer defines how to turn markdown text into tokens.
	   */
	tokenizer?: I_Tokenizer | null;
	/**
	   * Custom extensions
	   */
	extensions: CustomExtension | null;
	/**
	   * walkTokens function returns array of values for Promise.all
	   */
	walkTokens?: null | ((token: NodesToken) => null | Promise<void> | (null | Promise<void>)[]);
};