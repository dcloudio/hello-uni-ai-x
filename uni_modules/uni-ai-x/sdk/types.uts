export type Llm = {
	provider: string
	model: string
	webSearch: boolean
}

// 对话
export type Chat = {
	datas: ChatItem[],
	activeId: string
}

// 对话
export type ChatItem = {
	id: string,
	title: string,
	state: "none" | "processing" | "completed" | "stop"
	inputContent: string,
	msgList: MsgItem[],
	update_time: number
}

// 流式响应分块
type ChunkChoiceDelta = {
	content: string
}
type ChunkMessage = {
	content: string
}
type ChunkChoice = {
	delta?: ChunkChoiceDelta
	message?: ChunkMessage
}
type Output = {
	text: string
}
export type Chunk = {
	choices?: ChunkChoice[],
	output?: Output,
	DONE?: boolean,
}

// 消息
export type MsgItem = {
	_id: string
	body: string
	from_uid: string
	state: number
	create_time: number
	// 如果是ai回复的，则需要关联的msg_id
	about_msg_id?: string
	// 所属对话id
	chat_id: string
}
export type BaseMsgItem = {
	body: string
	from_uid: string
	about_msg_id?: string
}

// 消息对象，含：消息列表、是否还有更多消息、是否正在加载更多消息、加载更多消息方法
export type Msg = {
	dataList: MsgItem[],
	hasMore: boolean,
	loading: boolean,
	loadMore: () => void
}

// 请求ai对话消息
export type RequestAiCoMessage = {
	// 来自谁：用户或ai
	role : "user" | "assistant"
	// 内容
	content : string
}

type AvatarFile = {
	url?: string
	file_id?: string
	// 略...
}

// 用户
export type Userinfo = {
	_id?: string
	nickname?: string
	avatar_file?: AvatarFile
}

// 用户
export type Setting = {
	// 主题
	theme: "auto" | "dark" | "light",
	// 语言
	language: "zh-CN" | "en-US"
}