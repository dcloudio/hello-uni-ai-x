<template>
	<view class="msg-types-item-root uni-code-msg">
		<view class="code-header">
			<text class="language">{{language}}</text>
			<text v-if="supportHighlight" class="run-time">代码解析耗时：{{runTime}}ms</text>
			<text v-else class="not-support-tip">注意：当前语言不支持高亮显示</text>
			<view class="copy-btn" @click="copyCode">
				<uni-ai-icon class="copy" code="e67e" size="14" color="#999"/>
			</view>
		</view>
		<scroll-view direction="horizontal" class="code-view-scroll-view">
			<view class="code-view">
				<template v-if="supportHighlight" v-for="token in tokens">
					<view v-if="token.text == '\n'" class="br"></view>
					<text v-else class="code-text" :class="token.className">{{token.text}}</text>
				</template>
				<text v-else class="text" :selectable="true">{{code}}</text>
			</view>
		</scroll-view>
	</view>
</template>

<script>
const grammarList = ['javascript','typescript','javascriptReact','html','css','cpp','dart','go','java','lua','php','r','sql','json','jsonc','jsonl','c','cuda-cpp','xml','xsl']
// Import all grammar files - start
// #ifndef APP-ANDROID || APP-HARMONY
import javascriptGrammar from '@/uni_modules/uni-ai-x/static/grammar/javascript.tmLanguage.json'
import javascriptReactGrammar from '@/uni_modules/uni-ai-x/static/grammar/javascriptReact.tmLanguage.json'
import typescriptGrammar from '@/uni_modules/uni-ai-x/static/grammar/typescript.tmLanguage.json'
import htmlGrammar from '@/uni_modules/uni-ai-x/static/grammar/html.tmLanguage.json'
import cssGrammar from '@/uni_modules/uni-ai-x/static/grammar/css.tmLanguage.json'
import cppGrammar from '@/uni_modules/uni-ai-x/static/grammar/cpp.tmLanguage.json'
import dartGrammar from '@/uni_modules/uni-ai-x/static/grammar/dart.tmLanguage.json'
import goGrammar from '@/uni_modules/uni-ai-x/static/grammar/go.tmLanguage.json'
import javaGrammar from '@/uni_modules/uni-ai-x/static/grammar/java.tmLanguage.json'
import luaGrammar from '@/uni_modules/uni-ai-x/static/grammar/lua.tmLanguage.json'
import phpGrammar from '@/uni_modules/uni-ai-x/static/grammar/php.tmLanguage.json'
import rGrammar from '@/uni_modules/uni-ai-x/static/grammar/r.tmLanguage.json'
import sqlGrammar from '@/uni_modules/uni-ai-x/static/grammar/sql.tmLanguage.json'
import jsonGrammar from '@/uni_modules/uni-ai-x/static/grammar/JSON.tmLanguage.json'
import jsoncGrammar from '@/uni_modules/uni-ai-x/static/grammar/jsonc.tmLanguage.json'
import jsonlGrammar from '@/uni_modules/uni-ai-x/static/grammar/jsonl.tmLanguage.json'
import cGrammar from '@/uni_modules/uni-ai-x/static/grammar/c.tmLanguage.json'
import cudaCppGrammar from '@/uni_modules/uni-ai-x/static/grammar/cuda-cpp.tmLanguage.json'
import xmlGrammar from '@/uni_modules/uni-ai-x/static/grammar/xml.tmLanguage.json'
import xslGrammar from '@/uni_modules/uni-ai-x/static/grammar/xsl.tmLanguage.json'
import pythonGrammar from '@/uni_modules/uni-ai-x/static/grammar/python.tmLanguage.json'
// #endif
// Import all grammar files - end

import {  createHighLighter, HighLighterOptions, CreateHighLighterRes, ILineTokens} from "@/uni_modules/uni-code-highlighting"
import {MsgItem} from '@/uni_modules/uni-ai-x/sdk'
type IToken = {
	text: string,
	className: string
}
type TmlFile = {
	scopeName: string,
	path: string
}
let uniCodeHighlighter = null as CreateHighLighterRes | null
export default {
	name: 'msg-code',
	props: {
		// msg: {
		// 	type: Object as PropType<MsgItem>,
		// 	required: false,
		// 	default: {},
		// },
		code: {
			type: String,
			default: `
	import App from './App.uvue'
	// 注释：这是注释的内容
	import { createSSRApp } from 'vue'
	export function createApp() {
		const app = createSSRApp(App)
		return {
			app
		}
	}
`
		},
		language: {
			type: String,
			default: 'javascript',
		},
	},
	data() {
		return {
			tokens:[] as Array<IToken>,
			runTime: 0,
			// 当前语言是否支持高亮显示
			supportHighlight: true
		}
	},
	watch: {
		code: {
			handler() {
				// 计算耗时
				const start = Date.now()
				this.run()
				const end = Date.now()
				this.runTime = end - start
			},
			immediate: true
		},
		// 'msg.body': {
		// 	handler() {
		// 		// this.run()
		// 	},
		// 	immediate: true
		// }
	},
	methods: {
		async run(){
			const codeSource = this.code //this.code.length > 0 ? this.code : (this.msg.body as string)
			
			if(uniCodeHighlighter == null){
				// #ifndef APP-ANDROID || APP-HARMONY
				const tmls = {
					"html": htmlGrammar,
					"css": cssGrammar,
					"javascript": javascriptGrammar,
					"javascript-react": javascriptReactGrammar,
					"typescript": typescriptGrammar,
					"python": pythonGrammar,
					"sql": sqlGrammar,
				}
				// #endif
				// #ifdef APP-ANDROID || APP-HARMONY
				const tmlsList = [] as TmlFile[]
				grammarList.forEach(item => {
					tmlsList.push({
						scopeName: item,
						path: `/uni_modules/uni-ai-x/static/grammar/${item}.tmLanguage.json`
					})
				})
				// console.log('tmlsList',tmlsList)
				const tmls = this.getTmlFile(tmlsList)
				// #endif
				uniCodeHighlighter = await createHighLighter({languages: tmls} as HighLighterOptions) as CreateHighLighterRes
				// console.log(tmls)
				// 判断这个language是否在支持的列表中
				// #ifndef APP-ANDROID || APP-HARMONY
				this.supportHighlight = tmls.hasOwnProperty(this.language)
				// #endif
				// #ifdef APP-ANDROID || APP-HARMONY
				this.supportHighlight = grammarList.includes(this.language)
				// #endif
				if(!this.supportHighlight) return
			}
			// console.log('this.language',this.language)

			const ILineTokensList: ILineTokens[] = await uniCodeHighlighter!.tokenizeFullText(this.language, codeSource)
			const text = codeSource.split(/\r|\n|\r\n/);
			ILineTokensList.forEach((line, i) => {
				line.tokens.forEach((tk) => {
					this.tokens.push({
						text: text[i].substring(tk.startIndex, tk.endIndex),
						className: tk.scopes[tk.scopes.length - 1].split(".")[0]
					})
				})
				this.tokens.push({
					text: "\n",
					className: "eol"
				});
			})
			// console.error('this.tokens',this.tokens)
		},
		copyCode() {
			uni.setClipboardData({
				data: this.code,
				success: () => {
					uni.showToast({
						title: '代码已复制到剪贴板',
						icon: 'success'
					})
				},
				fail: () => {
					uni.showToast({
						title: '复制失败',
						icon: 'none'
					})
				}
			})
		},
		getTmlFile(filePaths: TmlFile[]) {
			let fileManager = uni.getFileSystemManager()
			let res = {}
			try {
				filePaths.forEach(item => {
					let content = fileManager.readFileSync(item.path, 'utf-8') as string
					res[item.scopeName] = JSON.parse(content)
				})
			} catch(err) {
				console.error('读取tml文件失败，请检查文件是否存在',err,filePaths)
				uni.showToast({
					title: '读取tml文件失败，请检查文件是否存在',
					icon: 'none'
				})
			}
			return res
		}
	}
}
</script>

<style lang="scss" scoped>
.msg-types-item-root {
	margin: 10px 0;
	background-color: #1e1e1e !important; // 更深沉的背景色，适合深色主题
	border-radius: 6px;
	overflow: hidden;
	&.uni-code-msg {
		flex-direction: column;
	}
	
	.text {
		color: #d4d4d4; // 更亮的文本颜色，提高可读性
		white-space: normal;
		/* #ifndef APP */
		word-break: break-all;
		/* #endif */
	}
	
	.code-header {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 5px 12px;
		background-color: #252526; // 稍微浅一点的头部背景色
		
		.language {
			font-size: 14px;
			color: #9cdcfe; // 更亮的蓝色，突出显示
		}
		
		.run-time {
			font-size: 12px;
			color: #6a9955; // 更亮的绿色，易于识别
		}
		.not-support-tip {
			font-size: 12px;
			color: #e6a23c; // 警告文本使用暖黄色，提高可见性但不刺眼
		}
		
		.copy-btn {
			padding: 5px 10px;
			border-radius: 4px;
			// #ifdef WEB
			cursor: pointer;
			&:hover {
				background-color: #37373d; // 悬停时的背景色
			}
			// #endif
		}
	}
	.code-view-scroll-view {
		.code-view {
			flex-direction: row;
			flex-wrap: wrap;
			padding: 12px;
			overflow: visible;
			.br {
				flex-basis: 100%;
			}
			
			.code-text {
				/* #ifndef APP */
				white-space: pre;
				/* #endif */
				color: #d4d4d4; // 默认代码文本颜色
			}
			
			.title {
				font-size: 18px;
				color: #9cdcfe; // 标题使用亮蓝色
				text-align: center;
			}
			
			// 代码高亮颜色，适合深色主题
			.keyword { color: #569cd6; } // 关键字使用蓝色
			.string { color: #ce9178; } // 字符串使用橙色
			.comment { color: #6a9955; } // 注释使用绿色
			.meta { color: #d16969; } // 元信息使用红色
			.storage { color: #569cd6; } // 存储类型使用蓝色
			.eol {
				/* #ifndef APP */
				white-space: pre;
				/* #endif */
			}
			.entity { color: #4ec9b0; } // 实体使用青色
			.support { color: #4ec9b0; } // 支持类使用青色
			.constant { color: #b5cea8; } // 常量使用浅绿色
			.variable { color: #9cdcfe; } // 变量使用浅蓝色
			.punctuation { color: #d4d4d4; } // 标点符号使用默认文本颜色
			.function { color: #dcdcaa; } // 函数使用黄色
		}
	}
}
// /Applications/Visual\ Studio\ Code.app/Contents/Resources/app/extensions/theme-defaults/themes/light_vs.json
</style>