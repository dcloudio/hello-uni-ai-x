<template>
	<uni-marked-el v-if="token.tokens != null && token.tokens!.length > 0" v-for="(nToken, index) in token.tokens" 
		:key="index" :token="nToken" :type="type + ' ' + token.type + (depth != 0 ? ' depth-' + depth : '')" 
		:link="link + (token.href ?? '')" :depth="depth"
	/>
	<template v-else-if="token.type == 'list'">
		<text class="list">
			<text v-for="(item, itemIndex) in token.items ?? []" :key="itemIndex" class="list-item" :class="'deep-index-' + deepIndex">
				<text v-if="itemIndex != 0 || deepIndex != 0" class="list-item-br">{{br}}</text>
				<!-- 根据 deepIndex 来决定 列表的缩进 -->
				<text v-for="i in deepIndex * 2" :key="i" class="list-item-nbsp" space="nbsp">&nbsp;</text>
				<text v-if="token.ordered != true" class="list-item-index unordered">&#xec1e;</text>
				<text v-else class="list-item-index">{{ itemIndex + 1 + '.' }}</text>
				<!-- <text v-else class="list-item-index">{{ token.raw?.split('.')[0] + '.' }}</text> -->
				<text class="list-item-nbsp" space="ensp">&nbsp;</text>
				<text class="list-item-content-box">
					<uni-marked-el v-for="(token, tokenIndex) in item.tokens ?? []" :key="tokenIndex" :type="token.type" :token="token" :deep-index="deepIndex + 1" />
				</text>
				<!-- 最后一个元素 添加一个换行 -->
				<!-- <text v-if="itemIndex == token.items!.length - 1" class="list-item-br">{{br}}</text> -->
			</text>
		</text>
	</template>
	
	<text v-else :class="type + ' text' + (link != '' ? ' link' : '')" @click="toLink(link)">{{token.text}}</text>
</template>

<script>
	import { useMarked, TokensList, NodesToken as MarkdownToken, Link } from '@/uni_modules/kux-marked';
	// import {markdown2json,type MarkdownToken} from '@/uni_modules/uni-ai-x/sdk/markdown2json';
	export default {
		name: 'uni-marked-el',
		props: {
			link: {
				type: String,
				default: ''
			},
			token: {
				type: Object as PropType<MarkdownToken>,
				required: true,
				default: {},
			},
			type: {
				type: String,
				default: ''
			},
			deepIndex: {
				type: Number,
				default: 0
			},
			depth: {
				type: Number,
				default: 0
			}
		},
		computed: {},
		data() {
			return {
				br: "\n"
			};
		},
		methods: {
			getTokens(tokens : Array<MarkdownToken>,type: string = ''): Array<MarkdownToken> {
				// 把循环嵌套的tokens，转换为一维数组。并且子项需要继承父项的type
				let newTokens: Array<MarkdownToken> = []
				tokens.forEach(token => {
					if (token.tokens != null && token.tokens.length > 0) {
						newTokens.push(...this.getTokens(token.tokens??[],token.type ?? ''))
					} else {
						// 继承父项的type
						if (type != '' && token.type!.includes(type) != true) {
							token.type += ' ' + type
						}
						newTokens.push(token)
					}
				})
				return newTokens
			},
			toLink(url: string) {
				if (url.length > 0) {
					console.error('url', url)
					uni.navigateTo({
						"url":"/uni_modules/uni-ai-x/pages/common/webview/webview?url="+url,
						fail:e=>{
							console.error(e);
						}
					})
				}
			}
		}
	}
</script>

<style lang="scss">
	@font-face {
		font-family: "uni-ai-icon";
		src: url('/uni_modules/uni-ai-x/static/font/iconfont.ttf');
	}
	.text {
		color: #333;
		// line-height: 1.5; // TODO：解决 text 嵌套会重叠文本的问题
		white-space: normal;
		/* #ifndef APP */
		word-break: break-all;
		max-width: 100%;
		/* #endif */
	}
	.strong {
		font-weight: bold;
	}
	
	.em {
		font-style: italic;
	}
	
	.del {
		/* #ifndef APP */
		text-decoration: line-through;
		/* #endif */
		color: #999;
	}

	.space {
		height: 10px;
	}
	.link {
		color: #0066cc;
		// #ifdef WEB
		cursor: pointer;
		&:hover {
			opacity: 0.8;
		}
		// #endif
	}
	.heading {
		color: #333;
		font-weight: bold;
		margin-bottom: 5px;
		
		&.depth-1 {
			font-size: 24px;
			font-weight: 700;
			margin-bottom: 6px;
			line-height: 1.25;
		}

		&.depth-2 {
			font-size: 22px;
			font-weight: 700;
			margin-bottom: 6px;
			line-height: 1.3;
		}

		&.depth-3 {
			font-size: 20px;
			font-weight: 700;
			margin-bottom: 6px;
			line-height: 1.4;
		}

		&.depth-4 {
			font-size: 18px;
			font-weight: 700;
			margin-bottom: 6px;
			line-height: 1.5;
		}

		&.depth-5 {
			font-size: 16px;
			font-weight: 700;
			margin-bottom: 6px;
			line-height: 1.6;
		}

		&.depth-6 {
			font-size: 14px;
			font-weight: 700;
			margin-bottom: 6px;
			color: #999;
			line-height: 1.6;
		}
	}

	.list {
		/* #ifndef APP */
		// TODO： 由于 App 端 text 嵌套存在设置 line-height 后，会导致 text 渲染不全的问题，所以这里需要通过条件编译避免
		line-height: 30px;
		/* #endif */
		padding-left: 5px;
		// border: solid 1px blue;
		width: 100%;
		.list-item-content-box {
			flex: 1;
			.list {
				margin-top: 0;
			}
		}
		
		.list-item {
			width: 100%;
			&.deep-index-1 {
				margin-left: 10px;
			}
			&.deep-index-2 {
				margin-left: 20px;
			}
			&.deep-index-3 {
				margin-left: 30px;
			}
			.list-item-br {}
			.list-item-index {
				width: 20px;
				&.unordered {
					font-family: uni-ai-icon;
					font-size: 15px;
					color: #000;
				}
			}
			background-color: #FFF;
		}
	}

	.ui-theme-dark {
		.text {
			color: #fff !important;
		}
		.strong {
			color: #fff !important;
		}
		.em {
			color: #fff !important;
		}
		.del {
			color: #999 !important;
		}
		.link {
			color: #0066cc !important;
		}
		.heading {
			color: #fff !important;
		}
		.list {
			.list-item-index {
				color: #fff !important;
			}
		}
	}
</style>
